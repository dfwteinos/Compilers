/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            PLUS, LPAREN, RPAREN, SEMI, COMMA, BEGIN, END;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal String     STRING_LITERAL, SENTENCE, IDENT;

/*  Non terminals */
non terminal           program;
non terminal String    func_dec, decl, sent, ids, args, more;      // used to store evaluated subexpressions

/**
 *  The Grammar Rules
 */

program ::= func_dec:e {:
			System.out.println("\n\nimport java.lang.Math;\n");
			System.out.println("public class Main {");
			System.out.println("\tpublic static void main(String[] args) {");
			System.out.printf("%s", e);
			System.out.println("\t}");
			System.out.println("}");
			:}
	        ;

func_dec    ::= func_dec: rest decl: e          {: RESULT = String.format("%s\t\tSystem.out.println(%s);\n", rest, e); :}
            |                                   {: RESULT = ""; :}
            ;

decl        ::= sent: sen ids:e                 {: RESULT = String.format("%s(%s)", sen, e); :}
            | STRING_LITERAL:s                  {: RESULT = String.format("Integer.parseInt(\"%s\", 16)", s); :}  
            ;

sent        ::= SENTENCE: sen                   {: RESULT = String.format("%s", sen); :}                 
            |                                   {: RESULT = ""; :}
            ;

ids         ::= LPAREN args: fin_arg            {: RESULT = String.format("%s", fin_arg); :}                 
            ;

args        ::= sent: sen more: e               {: RESULT = String.format("%s%s", sen, e); :}                 
            ;

more        ::= COMMA args: arg                 {: RESULT = String.format(",%s", arg); :}                        
            | RPAREN: rpar                      {: RESULT = String.format(""); :}    
            ;
