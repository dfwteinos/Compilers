
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\003\000\002\002\004\000\002\011" +
    "\004\000\002\011\002\000\002\012\006\000\002\012\005" +
    "\000\002\012\003\000\002\013\006\000\002\013\005\000" +
    "\002\013\007\000\002\013\006\000\002\014\004\000\002" +
    "\014\002\000\002\003\004\000\002\003\003\000\002\004" +
    "\006\000\002\006\003\000\002\006\005\000\002\007\004" +
    "\000\002\007\006\000\002\007\006\000\002\007\004\000" +
    "\002\007\003\000\002\010\004\000\002\010\002\000\002" +
    "\005\006\000\002\005\005\000\002\015\003\000\002\016" +
    "\004\000\002\017\004\000\002\017\002\000\002\020\011" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\006\000\002\021\006\000\002\021\003\000\002" +
    "\024\004\000\002\024\002\000\002\026\006\000\002\026" +
    "\005\000\002\027\006\000\002\027\005\000\002\027\006" +
    "\000\002\027\005\000\002\027\007\000\002\027\007\000" +
    "\002\027\006\000\002\027\004\000\002\030\004\000\002" +
    "\030\002\000\002\030\003\000\002\025\003\000\002\025" +
    "\005\000\002\023\004\000\002\023\004\000\002\023\002" +
    "\000\002\022\004\000\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\012\002\ufffe\012\013\017\007\020\015\001" +
    "\002\000\004\010\154\001\002\000\006\015\147\016\151" +
    "\001\002\000\020\002\uffdc\006\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\017\uffdc\020\uffdc\001\002\000\010\014\033\017\uffc8" +
    "\020\141\001\002\000\004\002\140\001\002\000\012\002" +
    "\ufffe\012\013\017\007\020\015\001\002\000\004\002\001" +
    "\001\002\000\004\005\131\001\002\000\004\005\120\001" +
    "\002\000\022\002\uffda\004\055\005\uffe6\012\uffda\015\uffcc" +
    "\016\uffcc\017\uffda\020\uffda\001\002\000\022\002\uffda\004" +
    "\055\006\uffda\011\uffda\012\uffda\013\uffda\017\uffda\020\uffda" +
    "\001\002\000\004\002\ufff3\001\002\000\012\002\ufffb\012" +
    "\ufffb\017\ufffb\020\ufffb\001\002\000\012\002\ufffe\012\013" +
    "\017\007\020\015\001\002\000\004\005\024\001\002\000" +
    "\004\002\uffff\001\002\000\010\006\025\017\030\020\027" +
    "\001\002\000\012\002\ufffc\012\ufffc\017\ufffc\020\ufffc\001" +
    "\002\000\004\005\046\001\002\000\020\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\014\uffe6\017\uffe6\020\uffe6\001\002\000" +
    "\010\014\033\017\035\020\027\001\002\000\004\006\032" +
    "\001\002\000\012\002\ufffd\012\ufffd\017\ufffd\020\ufffd\001" +
    "\002\000\010\014\033\017\uffc8\020\027\001\002\000\010" +
    "\014\033\017\uffc8\020\027\001\002\000\006\006\ufff5\007" +
    "\040\001\002\000\004\017\037\001\002\000\006\006\ufff5" +
    "\007\040\001\002\000\006\017\030\020\027\001\002\000" +
    "\004\006\ufffa\001\002\000\004\006\ufff6\001\002\000\004" +
    "\006\ufff9\001\002\000\004\017\uffca\001\002\000\004\017" +
    "\uffc9\001\002\000\010\006\047\017\030\020\027\001\002" +
    "\000\006\006\ufff5\007\040\001\002\000\004\006\051\001" +
    "\002\000\006\006\ufff5\007\040\001\002\000\004\006\ufff8" +
    "\001\002\000\004\006\ufff7\001\002\000\020\002\uffdf\006" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\017\uffdf\020\uffdf\001\002" +
    "\000\010\012\013\017\007\020\056\001\002\000\030\002" +
    "\uffda\004\055\005\061\006\uffda\011\uffda\012\uffda\013\uffda" +
    "\015\uffcc\016\uffcc\017\uffda\020\uffda\001\002\000\020\002" +
    "\uffdb\006\uffdb\011\uffdb\012\uffdb\013\uffdb\017\uffdb\020\uffdb" +
    "\001\002\000\020\002\uffe1\006\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\017\uffe1\020\uffe1\001\002\000\012\004\064\006\062" +
    "\017\066\020\027\001\002\000\022\002\uffd8\004\uffd8\006" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\017\uffd8\020\uffd8\001\002" +
    "\000\016\004\064\005\112\006\uffce\007\072\017\066\020" +
    "\027\001\002\000\006\017\104\020\103\001\002\000\004" +
    "\006\102\001\002\000\010\014\033\017\071\020\027\001" +
    "\002\000\010\014\033\017\100\020\027\001\002\000\004" +
    "\017\076\001\002\000\014\004\064\006\uffce\007\072\017" +
    "\066\020\027\001\002\000\010\004\064\017\066\020\027" +
    "\001\002\000\004\006\uffd6\001\002\000\004\006\uffcd\001" +
    "\002\000\004\006\uffcf\001\002\000\014\004\064\006\uffce" +
    "\007\072\017\066\020\027\001\002\000\004\006\uffd5\001" +
    "\002\000\014\004\064\006\uffce\007\072\017\066\020\027" +
    "\001\002\000\004\006\uffd7\001\002\000\022\002\uffd9\004" +
    "\uffd9\006\uffd9\011\uffd9\012\uffd9\013\uffd9\017\uffd9\020\uffd9" +
    "\001\002\000\014\004\064\006\uffce\007\072\017\066\020" +
    "\027\001\002\000\010\014\033\017\uffc8\020\027\001\002" +
    "\000\004\017\106\001\002\000\014\004\064\006\uffce\007" +
    "\072\017\066\020\027\001\002\000\004\006\uffd3\001\002" +
    "\000\004\006\uffd4\001\002\000\004\006\uffd0\001\002\000" +
    "\012\004\064\006\113\017\066\020\027\001\002\000\014" +
    "\004\064\006\uffce\007\072\017\066\020\027\001\002\000" +
    "\004\006\115\001\002\000\014\004\064\006\uffce\007\072" +
    "\017\066\020\027\001\002\000\004\006\uffd2\001\002\000" +
    "\004\006\uffd1\001\002\000\010\006\121\017\030\020\027" +
    "\001\002\000\014\002\ufffc\010\uffe7\012\ufffc\017\ufffc\020" +
    "\ufffc\001\002\000\010\005\046\006\uffe3\007\125\001\002" +
    "\000\004\006\124\001\002\000\004\010\uffe8\001\002\000" +
    "\004\020\027\001\002\000\004\006\uffe5\001\002\000\006" +
    "\006\uffe3\007\125\001\002\000\004\006\uffe4\001\002\000" +
    "\010\012\013\017\007\020\056\001\002\000\004\006\133" +
    "\001\002\000\010\012\013\017\007\020\056\001\002\000" +
    "\004\013\135\001\002\000\010\012\013\017\007\020\056" +
    "\001\002\000\020\002\uffe2\006\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\017\uffe2\020\uffe2\001\002\000\004\002\ufff4\001\002" +
    "\000\004\002\000\001\002\000\010\014\uffe6\017\145\020" +
    "\uffe6\001\002\000\004\017\143\001\002\000\022\002\uffda" +
    "\004\055\006\uffda\011\uffda\012\uffda\013\uffda\017\uffda\020" +
    "\uffda\001\002\000\020\002\uffde\006\uffde\011\uffde\012\uffde" +
    "\013\uffde\017\uffde\020\uffde\001\002\000\026\002\uffda\004" +
    "\055\006\uffda\011\uffda\012\uffda\013\uffda\015\uffcb\016\uffcb" +
    "\017\uffda\020\uffda\001\002\000\020\002\uffdd\006\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\017\uffdd\020\uffdd\001\002\000\010" +
    "\012\013\017\007\020\056\001\002\000\020\002\uffe0\006" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\017\uffe0\020\uffe0\001\002" +
    "\000\010\012\013\017\007\020\056\001\002\000\020\002" +
    "\uffc6\006\uffc6\011\uffc6\012\uffc6\013\uffc6\017\uffc6\020\uffc6" +
    "\001\002\000\020\002\uffc7\006\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\017\uffc7\020\uffc7\001\002\000\010\012\013\017\163" +
    "\020\157\001\002\000\006\004\171\011\uffe9\001\002\000" +
    "\004\011\uffeb\001\002\000\010\004\uffe6\005\061\011\uffe6" +
    "\001\002\000\006\004\171\011\uffe9\001\002\000\004\011" +
    "\177\001\002\000\004\011\ufff1\001\002\000\010\014\033" +
    "\017\uffc8\020\165\001\002\000\010\014\033\017\176\020" +
    "\027\001\002\000\010\014\uffe6\017\174\020\uffe6\001\002" +
    "\000\004\017\167\001\002\000\006\004\171\011\uffe9\001" +
    "\002\000\004\011\uffee\001\002\000\010\012\013\017\173" +
    "\020\157\001\002\000\004\011\uffea\001\002\000\010\014" +
    "\033\017\uffc8\020\165\001\002\000\006\004\171\011\uffe9" +
    "\001\002\000\004\011\uffed\001\002\000\004\011\ufff0\001" +
    "\002\000\012\002\ufff2\012\ufff2\017\ufff2\020\ufff2\001\002" +
    "\000\004\011\uffec\001\002\000\004\011\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\030\002\007\003\011\004\010\005\003\011" +
    "\016\012\020\015\013\020\005\021\017\025\004\026\015" +
    "\001\001\000\002\001\001\000\004\022\147\001\001\000" +
    "\002\001\001\000\006\015\033\023\141\001\001\000\002" +
    "\001\001\000\026\003\136\004\010\005\003\011\016\012" +
    "\020\015\013\020\005\021\017\025\004\026\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\057\001\001\000\004\024\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\022\012\020\015" +
    "\021\020\005\021\017\025\004\026\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\030\015\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\033\023\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\033\023\044\001\001\000\006" +
    "\015\033\023\043\001\001\000\004\014\042\001\001\000" +
    "\002\001\001\000\004\014\040\001\001\000\006\013\041" +
    "\015\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\047\015\025\001\001\000\004\014\052\001\001\000" +
    "\002\001\001\000\004\014\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\005\021" +
    "\056\025\004\026\015\001\001\000\004\024\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\062\027" +
    "\064\001\001\000\002\001\001\000\010\015\062\027\073" +
    "\030\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\066\023\067\001\001\000\006\015\033\023\043" +
    "\001\001\000\002\001\001\000\010\015\062\027\073\030" +
    "\072\001\001\000\006\015\062\027\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\062\027\073\030\076\001\001\000\002\001\001\000\010" +
    "\015\062\027\073\030\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\062\027\073\030\107\001\001" +
    "\000\006\015\033\023\104\001\001\000\002\001\001\000" +
    "\010\015\062\027\073\030\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\062\027" +
    "\113\001\001\000\010\015\062\027\073\030\116\001\001" +
    "\000\002\001\001\000\010\015\062\027\073\030\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\030" +
    "\015\121\016\122\001\001\000\002\001\001\000\004\017" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\126\016\127\001\001\000\002\001\001\000\004\017" +
    "\125\001\001\000\002\001\001\000\012\020\005\021\131" +
    "\025\004\026\015\001\001\000\002\001\001\000\012\020" +
    "\005\021\133\025\004\026\015\001\001\000\002\001\001" +
    "\000\012\020\005\021\135\025\004\026\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\143\001\001\000" +
    "\002\001\001\000\004\024\145\001\001\000\002\001\001" +
    "\000\012\020\005\021\152\025\004\026\015\001\001\000" +
    "\002\001\001\000\012\020\005\021\151\025\004\026\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\160\007\161\015\154\020\155\026\157\001\001\000\004" +
    "\010\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\163\023\165\001\001\000\006\015\033\023" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\167\001\001\000\002\001\001\000\012\007\171\015" +
    "\154\020\155\026\157\001\001\000\002\001\001\000\006" +
    "\015\033\023\165\001\001\000\004\010\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= func_decl 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String decl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  System.out.println("\n}");
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // func_call ::= struct_call func_call 
            {
              String RESULT =null;
		int restleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rest = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rest + "\n" + e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // func_call ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // struct_call ::= sent LPAREN params RPAREN 
            {
              String RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int identifiersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identifiersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String identifiers = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = String.format("\t\tSystem.out.println(%s(%s));", fname, identifiers); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_call",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // struct_call ::= sent LPAREN RPAREN 
            {
              String RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = String.format("\t\tSystem.out.println(%s());", fname); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_call",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // struct_call ::= conditions 
            {
              String RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\t\tSystem.out.println(%s);", expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_call",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // params ::= STRING_LITERAL mult_string STRING_LITERAL args 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "\"" + sen + "\b\"" + fin; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // params ::= STRING_LITERAL STRING_LITERAL args 
            {
              String RESULT =null;
		int onargleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int onargright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String onarg = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\" \"%s", fin); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // params ::= sent LPAREN params RPAREN args 
            {
              String RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int identifiersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifiersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String identifiers = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s(%s)%s", fname, identifiers, fin); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // params ::= sent LPAREN RPAREN args 
            {
              String RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s()%s", fname, fin); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // args ::= COMMA params 
            {
              String RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format(", %s", arg); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // args ::= 
            {
              String RESULT =null;
		 RESULT = String.format(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // func_decl ::= function func_decl 
            {
              String RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.printf("%s", res);
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // func_decl ::= func_call 
            {
              String RESULT =null;
		int callsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int callsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String calls = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("\n\nimport java.lang.*;\n");
			                                            System.out.println("public class Main {");
			                                            System.out.println("\tpublic static void main(String[] args) {");

                                                        /* Function calls goes here */
                                                        System.out.printf("%s", calls);
                                                        System.out.println("\t}");
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= frame BEGIN body_func END 
            {
              String RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String decl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String body = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = String.format("\n\tpublic static String %s {\n\t\t return %s;\n\t}\n", decl, body ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body_func ::= concat 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s", e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_func",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body_func ::= STRING_LITERAL sent STRING_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\"%s\"", sen); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_func",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // concat ::= sent plus_sign 
            {
              String RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s%s", sen, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // concat ::= STRING_LITERAL mult_string STRING_LITERAL plus_sign 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\"%s\"%s", sen,fin); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // concat ::= STRING_LITERAL SENTENCE STRING_LITERAL plus_sign 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\"%s\"%s", sen,fin); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // concat ::= inner_func plus_sign 
            {
              String RESULT =null;
		int infleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int infright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String inf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s%s", inf, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // concat ::= if_else_expr 
            {
              String RESULT =null;
		int if_elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int if_elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String if_else = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s", if_else); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // plus_sign ::= PLUS concat 
            {
              String RESULT =null;
		int fin_varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fin_varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ".concat(" + fin_var + ")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plus_sign",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // plus_sign ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plus_sign",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // frame ::= sent LPAREN id RPAREN 
            {
              String RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = String.format("%s(%s)", sen, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("frame",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // frame ::= sent LPAREN RPAREN 
            {
              String RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = String.format("%s()", sen); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("frame",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sent ::= SENTENCE 
            {
              String RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s", sen); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // id ::= sent more 
            {
              String RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("String %s%s", sen, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // more ::= COMMA id 
            {
              String RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format(", %s", arg); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // more ::= 
            {
              String RESULT =null;
		 RESULT = String.format(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if_else_expr ::= IF LPAREN conditions RPAREN conditions ELSE conditions 
            {
              String RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String cond1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cond2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cond3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cond3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cond3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "(" + cond1 + ") ? " + cond2 + " : " + cond3; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_else_expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // conditions ::= SENTENCE conc_sign 
            {
              String RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int senteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int senteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sente = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sen + sente;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // conditions ::= inner_cond suf_pre 
            {
              String RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr + sen + ")";   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // conditions ::= inner_func conc_sign 
            {
              String RESULT =null;
		int infleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int infright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String inf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int innFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int innFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String innFunc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = inf + innFunc;      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // conditions ::= STRING_LITERAL mult_string STRING_LITERAL conc_sign 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\"%s\"%s", sen, e);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // conditions ::= STRING_LITERAL SENTENCE STRING_LITERAL conc_sign 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\"%s\"%s", sen, e);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // conditions ::= if_else_expr 
            {
              String RESULT =null;
		int if_elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int if_elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String if_else = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = if_else;            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // conc_sign ::= PLUS conditions 
            {
              String RESULT =null;
		int fin_varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fin_varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ".concat(" + fin_var + ")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conc_sign",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // conc_sign ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conc_sign",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // inner_func ::= SENTENCE LPAREN inner_par RPAREN 
            {
              String RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int identifiersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identifiersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String identifiers = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = fname + "(" + identifiers + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inner_func",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // inner_func ::= SENTENCE LPAREN RPAREN 
            {
              String RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = fname + "()"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inner_func",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // inner_par ::= STRING_LITERAL sent STRING_LITERAL in_args 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\"%s\"%s", sen, fin); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inner_par",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // inner_par ::= STRING_LITERAL STRING_LITERAL in_args 
            {
              String RESULT =null;
		int onargleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int onargright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String onarg = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\" \"%s", fin); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inner_par",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // inner_par ::= STRING_LITERAL mult_string STRING_LITERAL in_args 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\"%s\"%s", sen, fin);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inner_par",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // inner_par ::= PLUS SENTENCE in_args 
            {
              String RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ".concat(" + sen + ")" + fin; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inner_par",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // inner_par ::= PLUS STRING_LITERAL mult_string STRING_LITERAL in_args 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ".concat(\"" + sen + "\")" + fin; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inner_par",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // inner_par ::= sent LPAREN inner_par RPAREN in_args 
            {
              String RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int identifiersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifiersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String identifiers = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s(%s)%s", fname, identifiers, fin); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inner_par",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // inner_par ::= sent LPAREN RPAREN in_args 
            {
              String RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s()%s", fname, fin); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inner_par",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // inner_par ::= sent in_args 
            {
              String RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s%s",sen, fin); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inner_par",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // in_args ::= COMMA inner_par 
            {
              String RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format(", %s", arg); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in_args",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // in_args ::= 
            {
              String RESULT =null;
		 RESULT = String.format(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in_args",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // in_args ::= inner_par 
            {
              String RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = arg; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in_args",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // inner_cond ::= SENTENCE 
            {
              String RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sen; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inner_cond",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inner_cond ::= STRING_LITERAL SENTENCE STRING_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("\"%s\"", sen); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inner_cond",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mult_string ::= sent mult_string 
            {
              String RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format("%s %s", sen, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mult_string",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mult_string ::= POINT mult_string 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = String.format(".%s", e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mult_string",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // mult_string ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mult_string",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // suf_pre ::= PREFIX conditions 
            {
              String RESULT =null;
		int preleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cond + ".startsWith(";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suf_pre",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // suf_pre ::= SUFFIX conditions 
            {
              String RESULT =null;
		int sufleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sufright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object suf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cond + ".endsWith(" ;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suf_pre",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
